name: MSK timezone

on:
  push:
    branches:
      - '*'
    paths:
      - 'app_python/**'
  pull_request:
    branches:
      - '*'
    paths:
      - 'app_python/**'

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker
        options: --privileged

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Snyk CLI
      run: npm install snyk -g

    - name: Cache Python dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: 'app_python'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint code
      run: |
        flake8 .

    - name: Set up Docker Buildx 
      uses: docker/setup-buildx-action@v1 
      
    - name: Cache Docker layers 
      uses: actions/cache@v2 
      with: 
        path: ~/.docker 
        key: ${{ runner.os }}-docker-${{ github.sha }} 
        restore-keys: ${{ runner.os }}-docker- 
      
    - name: Log in to Docker Hub 
      uses: docker/login-action@v1 
      with: 
        username: ${{ secrets.DOCKER_USERNAME }} 
        password: ${{ secrets.DOCKER_PASSWORD }} 

    - name: Build and Push Docker image
      run: |
        docker build -t dzendos/app_python:latest 'app_python/'
        docker push dzendos/app_python:latest

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.8@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args:
            -snyk
            -test app_python --skip-unresolved 
    
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Run tests
        run: |
          python3 -m unittest discover -s .
      